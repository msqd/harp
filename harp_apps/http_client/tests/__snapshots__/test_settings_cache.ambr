# serializer version: 1
# name: TestCacheSettings.test_jsonschema_for_serialization
  dict({
    '$defs': dict({
      'Service': dict({
        'additionalProperties': True,
        'description': 'A settings base class for service definitions.',
        'properties': dict({
          'arguments': dict({
            'anyOf': list([
              dict({
                'type': 'object',
              }),
              dict({
                'type': 'null',
              }),
            ]),
            'description': 'Arguments for the service constructor.',
            'title': 'Arguments',
          }),
          'base': dict({
            'anyOf': list([
              dict({
                'type': 'string',
              }),
              dict({
                'type': 'null',
              }),
            ]),
            'default': None,
            'description': 'Base type for service definition.',
            'title': 'Base',
          }),
          'constructor': dict({
            'anyOf': list([
              dict({
                'type': 'string',
              }),
              dict({
                'type': 'null',
              }),
            ]),
            'default': None,
            'description': 'Optional custom constructor for the service.',
            'title': 'Constructor',
          }),
          'type': dict({
            'anyOf': list([
              dict({
                'type': 'string',
              }),
              dict({
                'type': 'null',
              }),
            ]),
            'default': None,
            'description': 'Type for service definition.',
            'title': 'Type',
          }),
        }),
        'title': 'Service',
        'type': 'object',
      }),
    }),
    'additionalProperties': False,
    'properties': dict({
      'controller': dict({
        '$ref': '#/$defs/Service',
        'default': dict({
          'allow_heuristics': False,
          'allow_stale': False,
          'cacheable_methods': list([
            'GET',
            'HEAD',
          ]),
          'cacheable_status_codes': list([
            200,
            203,
            204,
            206,
            300,
            301,
            308,
            404,
            405,
            410,
            414,
            501,
          ]),
          'type': 'hishel.Controller',
        }),
      }),
      'enabled': dict({
        'default': True,
        'title': 'Enabled',
        'type': 'boolean',
      }),
      'storage': dict({
        '$ref': '#/$defs/Service',
        'default': dict({
          'base': 'hishel.AsyncBaseStorage',
          'check_ttl_every': 60.0,
          'ttl': None,
          'type': 'harp_apps.http_client.contrib.hishel.storages.AsyncStorage',
        }),
      }),
      'transport': dict({
        '$ref': '#/$defs/Service',
        'default': dict({
          'type': 'hishel.AsyncCacheTransport',
        }),
      }),
    }),
    'title': 'CacheSettings',
    'type': 'object',
  })
# ---
# name: TestCacheSettings.test_jsonschema_for_validation
  dict({
    '$defs': dict({
      'Service': dict({
        'additionalProperties': True,
        'description': 'A settings base class for service definitions.',
        'properties': dict({
          'arguments': dict({
            'anyOf': list([
              dict({
                'type': 'object',
              }),
              dict({
                'type': 'null',
              }),
            ]),
            'description': 'Arguments for the service constructor.',
            'title': 'Arguments',
          }),
          'base': dict({
            'anyOf': list([
              dict({
                'type': 'string',
              }),
              dict({
                'type': 'null',
              }),
            ]),
            'default': None,
            'description': 'Base type for service definition.',
            'title': 'Base',
          }),
          'constructor': dict({
            'anyOf': list([
              dict({
                'type': 'string',
              }),
              dict({
                'type': 'null',
              }),
            ]),
            'default': None,
            'description': 'Optional custom constructor for the service.',
            'title': 'Constructor',
          }),
          'type': dict({
            'anyOf': list([
              dict({
                'type': 'string',
              }),
              dict({
                'type': 'null',
              }),
            ]),
            'default': None,
            'description': 'Type for service definition.',
            'title': 'Type',
          }),
        }),
        'title': 'Service',
        'type': 'object',
      }),
    }),
    'additionalProperties': False,
    'properties': dict({
      'controller': dict({
        '$ref': '#/$defs/Service',
        'default': dict({
          'allow_heuristics': False,
          'allow_stale': False,
          'cacheable_methods': list([
            'GET',
            'HEAD',
          ]),
          'cacheable_status_codes': list([
            200,
            203,
            204,
            206,
            300,
            301,
            308,
            404,
            405,
            410,
            414,
            501,
          ]),
          'type': 'hishel.Controller',
        }),
      }),
      'enabled': dict({
        'default': True,
        'title': 'Enabled',
        'type': 'boolean',
      }),
      'storage': dict({
        '$ref': '#/$defs/Service',
        'default': dict({
          'base': 'hishel.AsyncBaseStorage',
          'check_ttl_every': 60.0,
          'ttl': None,
          'type': 'harp_apps.http_client.contrib.hishel.storages.AsyncStorage',
        }),
      }),
      'transport': dict({
        '$ref': '#/$defs/Service',
        'default': dict({
          'type': 'hishel.AsyncCacheTransport',
        }),
      }),
    }),
    'title': 'CacheSettings',
    'type': 'object',
  })
# ---
